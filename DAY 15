--EX1
SELECT 
  EXTRACT (YEAR FROM transaction_date) AS year, 
  product_id,
  spend AS curr_year_spend,
  LAG(spend) OVER(PARTITION BY product_id
  ORDER BY EXTRACT (YEAR FROM transaction_date)) AS prev_year_spend,
  ROUND(100*(spend -
  LAG(spend) OVER(PARTITION BY product_id
  ORDER BY EXTRACT (YEAR FROM transaction_date)))/
  LAG(spend) OVER(PARTITION BY product_id
  ORDER BY EXTRACT (YEAR FROM transaction_date))
  ,2) AS yoy_rate
FROM user_transactions 
--EX2
WITH card_launch AS
(SELECT 
  card_name,
  issued_amount,
  MAKE_DATE(issue_year, issue_month, 1) AS issue_date,
  MIN(MAKE_DATE(issue_year, issue_month, 1)) 
  OVER (PARTITION BY card_name) AS launch_date
FROM monthly_cards_issued
)
SELECT card_name, issued_amount
FROM card_launch 
WHERE issue_date=launch_date
ORDER BY issued_amount DESC 
--EX3
WITH twt_date AS
(
SELECT 
  user_id,
  spend,
  transaction_date,
  RANK() OVER (PARTITION BY user_id ORDER BY transaction_date) AS rank
FROM transactions
)
SELECT 
  user_id,
  spend,
  transaction_date
FROM twt_date
WHERE rank='3'
--EX4
WITH CTE AS
(
SELECT 
  transaction_date,
  user_id,
  COUNT(*) AS purchase_count,
  MAX(transaction_date) OVER (PARTITION BY user_id ORDER BY transaction_date DESC) 
  AS recent_date
FROM user_transactions
GROUP BY transaction_date, user_id
)
SELECT 
  transaction_date,
  user_id,
  purchase_count
FROM CTE 
WHERE recent_date=transaction_date
ORDER BY transaction_date 
--EX5
SELECT
  user_id,
  tweet_date,
  ROUND(AVG(tweet_count) OVER (PARTITION BY user_id ORDER BY tweet_date ROWS BETWEEN 2 PRECEDING
  AND CURRENT ROW),2) AS rolling_avg_3d
FROM tweets
--EX6
WITH CTE1 AS
(
SELECT 
  transaction_id,
  merchant_id,
  credit_card_id,
  amount,
  transaction_timestamp,
  RANK() OVER(ORDER BY merchant_id, credit_card_id, amount) AS rnk,
  LEAD(transaction_timestamp) OVER(ORDER BY merchant_id, credit_card_id, amount),
  LEAD(transaction_timestamp) OVER(ORDER BY merchant_id, credit_card_id, amount)-
  transaction_timestamp AS time_period,
  EXTRACT (minute FROM LEAD(transaction_timestamp) OVER(ORDER BY merchant_id, credit_card_id, amount)-
  transaction_timestamp) AS number_of_minutes
FROM transactions
),
 CTE2 AS 
(
SELECT
  COUNT(rnk) -1 AS count_number
FROM CTE1 
WHERE number_of_minutes <='10' 
GROUP BY rnk 
)
SELECT
  SUM (count_number) AS payment_count
FROM CTE2
  
--EX7
WITH CTE AS
(
SELECT
  category,
  product,
  SUM(spend) AS total_spend,
  RANK() OVER(PARTITION BY category ORDER BY SUM(spend) DESC) AS rnk
FROM product_spend
WHERE EXTRACT('year' FROM transaction_date) = '2022'
GROUP BY category, product
)
SELECT 
  category,
  product,
  total_spend
FROM CTE 
WHERE rnk IN (1,2)
--EX8
WITH CTE AS 
(
SELECT 
  ar.artist_name,
  gsr.song_id,
  gsr.rank
FROM artists AS ar 
JOIN songs AS so 
ON ar.artist_id=so.artist_id 
JOIN global_song_rank AS gsr 
ON gsr.song_id=so.song_id 
WHERE gsr.rank <=10
ORDER BY rank 
), CTE2 AS 
(
SELECT 
  artist_name,
  COUNT(song_id) AS count,
  DENSE_RANK() OVER(ORDER BY COUNT(song_id) DESC) AS artist_rank
FROM CTE 
GROUP BY artist_name
)
SELECT 
  artist_name,
  artist_rank
FROM CTE2 
WHERE artist_rank<='5'
ORDER BY artist_rank, artist_name
  
